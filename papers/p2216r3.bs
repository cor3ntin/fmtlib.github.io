<pre class='metadata'>
Title: std::format improvements
Shortname: D2216
Revision: 3
<!-- !Draft Revision: 0 -->
Audience: LEWG
Status: D
Group: WG21
URL:
Editor: Victor Zverovich, victor.zverovich@gmail.com
No abstract: true
Date: 2020-02-02
Markup Shorthands: markdown yes
</pre>

<style type="text/css">
  td {
    vertical-align: middle;
  }
	ins { text-decoration: none; }
  ins code { background: #cfc !important; }

  .poll th, .poll td {
		text-align: right;
    width: 20%;
	}
</style>

<p style="text-align: right">
"Safety doesn't happen by accident." <br>
â€• unknown
</p>

Introduction {#intro}
============

This paper proposes the following improvements to the C++20 formatting facility:

* Improving safety via compile-time format string checks
* Reducing binary code size of `format_to`

Revision history {#hist}
================

Changes since R2:

* 

Changes since R1:

* Made the `str` member of `basic-format-string` exposition-only.

* Added missing `consteval` to the `basic-format-string` constructor.

* Added "A string `s` is a format string for argument types `Args` if there
    exist `args` of types `Args` such that `s` is a format string for `args`." to
    [format.string.general].

* Replaced "Initializes `str`" with "Direct-non-list-initializes `str`" in the
    the *Effects* clause of the `basic-format-string` constructor.

* Replaced "`is_convertible_v<const T&, basic_string_view<charT>>`"
    with "`const T&` models `convertible_to<basic_string_view<charT>>`" in the
    *Constraints* clause of the `basic-format-string` constructor.

* Replaced "*Mandates:* `s` is a format string for `Args`." with "*Remarks:*
    A call to this function is not a core constant expression ([expr.const])
    unless `str` is a format string for `Args`." in the specification of the
    `basic-format-string` constructor.

Changes since R0:

* Removed "Passing an argument `fmt` that is not a format string for parameter
    pack `args` is ill-formed with no diagnostic required." per LEWG feedback.

* Changed the wording to use C++20 facilities and an exposition-only
    <i>`basic-format-string`</i> type for guaranteed diagnostic and no reliance
    on compiler extensions per LEWG feedback.

* Added an implementation sketch to [[#checks]].

* Clarified why code bloat cannot be addressed just as a quality of
    implementation issue in [[#binary]].

* Added an example illustrating one of the cases where code bloat occurs to
    [[#binary]].

LEWG polls (R1) {#polls}
===============

We prefer Option 2 (only string literals) over option 1 (all constexpr format
str)

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>0
  <td>3
  <td>0
  <td>7
  <td>2
</tr>
</table>

Stay with option 1

We want to adopt the binary size reduction presented in P2216r1 even if it is a
breaking change against C++20.

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>4
  <td>8
  <td>0
  <td>0
  <td>0
</tr>
</table>

Strong consensus for change.

We would prefer the binary size reduction change to be made as a DR against C++20

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>7
  <td>6
  <td>3
  <td>0
  <td>0
</tr>
</table>

Strong consensus for DR

We would prefer the compile time checking change to be made as a DR against C++20

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>7
  <td>7
  <td>1
  <td>0
  <td>0
</tr>
</table>

Strong consensus for DR

Pending a wording review from Tim Song we want the next revision of this paper
to proceed to electronic balloting with priority B1 (focus).

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>9
  <td>5
  <td>0
  <td>0
  <td>0
</tr>
</table>

Strong consensus, we want this paper to proceed

LEWG polls (R0) {#polls2}
===============

We should promise more committee time to pursuing the compile time checking
aspects of P2216R0, knowing that our time is scarce and this will leave less
time for other work.

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>6
  <td>6
  <td>3
  <td>0
  <td>0
</tr>
</table>

Consensus to pursue

We should promise more committee time to pursuing the code bloat aspects of
P2216R0, knowing that our time is scarce and this will leave less time for other
work.

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>3
  <td>8
  <td>6
  <td>0
  <td>0
</tr>
</table>

Consensus to pursue

We are comfortable having `std::format` compile time check failures cause the
program to be ill-formed, no diagnostic required (IFNDR).

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>0
  <td>1
  <td>2
  <td>4
  <td>8
</tr>
</table>

LEWG is not comfortable with IFNDR

LEWG would prefer `std::format` compile time check failures to cause the program
to be ill-formed (diagnostic required).

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>5
  <td>7
  <td>1
  <td>0
  <td>0
</tr>
</table>

LEWG prefers ill-formed

We are comfortable having `std::format` compile time checks rely on compiler
extensions to be implementable.

<table class="poll">
<tr>
  <th>SF
  <th>F
  <th>N
  <th>A
  <th>SA
</th>
<tr>
  <td>3
  <td>3
  <td>4
  <td>4
  <td>0
</tr>
</table>

LEWG is somewhat is uncomfortable with relying on compiler extensions for this
facility

Compile-time checks {#checks}
===================

Consider the following example:

```c++
std::string s = std::format("{:d}", "I am not a number");
```

In C++20 ([[N4861]]) it throws `format_error` because `d` is not a valid format
specifier for a null-terminated character string.

We propose making it ill-formed resulting in a compile-time rather than a
runtime error. This will significantly improve safety of the formatting API and
bring it on par with other languages such as D ([[D-FORMAT]]) and Rust
([[RUST-FMT]]).

This proposal has been successfully implemented in the open-source {fmt} library
([[FMT]]) using only C++20 facilities and tested on Clang 11 and GCC 10. It will
become the default in the next major release of the library. The implementation
is very simple and straightforward because format string parsing in C++20 has
been designed with such checks in mind ([[P0645]]) and is already `constexpr`.

There are two options:

1. Provide compile-time checks for all format strings known at compile time.
2. Limit checks to string literals only.

Here is a sketch of the implementation:

<!-- https://godbolt.org/z/6sKx5P -->
```
#ifdef OPTION_1 // exposition only

// Option 1:
template<class charT, class... Args> struct basic_format_string {
  basic_string_view<charT> str;

  template<class T, enable_if_t<
    is_convertible_v<const T&, basic_string_view<charT>>, int> = 0>
  consteval basic_format_string(const T& s) : str(s) {
    // Report a compile-time error if s is not a format string for Args.
  }
};

#else

// Option 2:
template<class charT, class... Args> struct basic_format_string {
  basic_string_view<charT> str;

  template<size_t N>
  consteval basic_format_string(const charT (&s)\[N]) : str(s) {
    // Report a compile-time error if s is not a format string for Args.
  }

  template<class T, enable_if_t<
    is_convertible_v<const T&, basic_string_view<charT>>, int> = 0>
  basic_format_string(const T& s) : str(s) {}
};

#endif

// Same for Option 1 & Option 2:
template<class... Args>
  using format_string =
    basic_format_string<char, type_identity_t<Args>...>;

template <class... Args>
string format(format_string<Args...> fmt, const Args&... args) {
  return vformat(fmt.str, make_format_args(args...));
}
```

Compiling our example produces the following diagnostic on Clang:

```text
<source>:36:26: error: call to consteval function 'basic_format_string<char, char [18]>::basic_format_string<5>' is not a constant expression
  std::string s = format("{:d}", "I am not a number");
                         ^
/opt/compiler-explorer/libs/fmt/trunk/include/fmt/format.h:1422:13: note: non-constexpr function 'on_error' cannot be used in a constant expression
    handler.on_error("invalid type specifier");
            ^
...
```

Comparison of different options:

<table>
<tr>
  <th>Code
  <th>C++20
  <th>Option 1
  <th>Option 2
</th>
<tr>
  <td>
  ```
  auto s = format("{:d}", 42);
  ```
  <td>OK
  <td>OK
  <td>OK
</tr>
<tr>
  <td>
  ```
  auto s = format("{:s}", 42);
  ```
  <td>throws
  <td>ill-formed
  <td>ill-formed
</tr>
<tr>
  <td>
  ```
  constexpr const char fmt[] = "{:d}";
  auto s = format(fmt, 42);
  ```
  <td>OK
  <td>OK
  <td>OK
</tr>
<tr>
  <td>
  ```
  const char fmt[] = "{:d}";
  auto s = format(fmt, 42);
  ```
  <td>OK
  <td>ill-formed
  <td>ill-formed
</tr>
<tr>
  <td>
  ```
  constexpr const char* fmt = "{:s}";
  auto s = format(fmt, 42);
  ```
  <td>throws
  <td>ill-formed
  <td>throws
</tr>
<tr>
  <td>
  ```
  const char* fmt = "{:d}";
  auto s = format(fmt, 42);
  ```
  <td>OK
  <td>ill-formed
  <td>OK
</tr>
</table>

Option 1 is safer but has the same limitation as Rust's `format!` of only
accepting format strings known at compile time. However, it is still possible to
pass a runtime string via `vformat`:

```
const char* fmt = "{:d}";
auto s = vformat(fmt, make_format_args(42));
```

Additionally we can provide a convenience wrapper for passing runtime strings:

```
const char* fmt = "{:d}";
auto s = format(runtime_format(fmt), 42);
```

Note that in the vast majority of cases format strings are literals.
For example, analyzing a sample of 100 `printf` calls from [[CODESEARCH]] showed
that 98 of them are string literals and 2 are string literals wrapped in the `_`
gettext macro:

```
printf (_("call to tc_aout_fix_to_chars \n"));
```

In this case translation and runtime format markers can be combined without any
impact on usability.

We propose making `basic_format_string` exposition-only because it is an
implementation detail and in the future the same functionality can be
implemented using [[P1221]] (see e.g.
[https://godbolt.org/z/hcnxfY](https://godbolt.org/z/hcnxfY)) or [[P1045]].

From the extensive usage experience in the {fmt} library ([[FMT]]) that provides
compile-time checks as an opt-in we've found that users expect errors in literal
format strings to be diagnosed at compile time by default. One of the reasons is
that such diagnostic is commonly done in `printf`, for example:

```c++
printf("%d", "I am not a number");
```

gives a warning both in GCC and clang:

```
warning: format specifies type 'int' but the argument has type 'const char *' [-Wformat]
```
so users expect the same or better level of diagnostics from a similar C++
facility.

<!-- Detect if an argument is a compile string:
https://github.com/gcc-mirror/gcc/blob/5c9b44183a23b1bd4cb93fd82cd9ffa62e88dcf8/libstdc%2B%2B-v3/include/bits/char_traits.h#L229-L242 -->

Binary size {#binary}
===========

The `vformat_to` functions take format arguments parameterized on the output
iterator via the formatting context:

```c++
template<class Out, class charT>
    using format_args_t = basic_format_args<basic_format_context<Out, charT>>;

template<class Out>
  Out vformat_to(Out out, string_view fmt,
                 format_args_t<type_identity_t<Out>, char> args);
```

Unfortunately it may result in significant code bloat because formatting code
will have to be instantiated for every iterator type used with `format_to` or
`vformat_to`, for example:

```
std::vector<char> v;
std::format_to(std::back_inserter(v), "{}", 42);
// Formatting functions are instantiated for std::back_insert_iterator<std::vector<char>>.

std::string s;
std::format_to(std::back_inserter(s), "{}", 42);
// Formatting functions are instantiated for std::back_insert_iterator<std::string>.
```

This happens even for argument types that are not formatted,
clearly violating "you donâ€™t pay for what you donâ€™t use" principle. Also this is
unnecessary because the iterator type can be erased via the internal buffer as
it is done in `format` and `vformat` without affecting performance for the
common case of containers with contiguous storage. Therefore we propose using
`format_args` and `wformat_args` instead of `format_args_t` in these overloads:

```c++
template<class Out>
  Out vformat_to(Out out, string_view fmt, format_args args);
```

`formatter` specializations will continue to support output iterators so this
only affects type-erased API and not the one with compiled format strings that
will be proposed separately. The latter will not be affected by the code bloat
issue because instantiations will be limited only to used argument types.

In addition to reducing the code bloat this will simplify the API.

The code bloat problem cannot be solved just as a quality of implementation
issue because the iterator type is observable through the `formatter` API.

This proposal has been successfully implemented in the {fmt} library ([[FMT]]).

Impact on existing code {#impact}
=======================

Making invalid format strings ill-formed and modifying the problematic
`vformat_to` overloads are breaking changes although at the time of writing none
of the standard libraries implements the Ð¡++20 formatting facility and therefore
there is no code using it.

Wording {#wording}
=======

All wording is relative to the C++ working draft [[N4861]].

Update the value of the feature-testing macro `__cpp_lib_format` to the date of
adoption in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf#page=493">[version.syn]</a>:

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf#page=729">[format.syn]</a>:

<pre>
namespace std {
<ins>  // 20.20.3, error reporting
  template&lt;class charT, class... Args> struct <i>basic-format-string</i> {  <i>// exposition only</i>
    basic_string_view&lt;charT> <i>str</i>;                                    <i>// exposition only</i>

    template&lt;class T> consteval basic-format-string(const T& s);
  };

  template&lt;class... Args>
    using format-string =
      <i>basic-format-string</i>&lt;char, type_identity_t&lt;Args>...>;     <i>// exposition only</i>
  template&lt;class... Args>
    using wformat-string =
      <i>basic-format-string</i>&lt;wchar_t, type_identity_t&lt;Args>...>;  <i>// exposition only</i></ins>

  // 20.20.4, formatting functions
  template&lt;class... Args>
    string format(<del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class... Args>
    wstring format(<del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class... Args>
    string format(const locale& loc, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                  const Args&... args);
  template&lt;class... Args>
    wstring format(const locale& loc, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                   const Args&... args);

  ...

  template&lt;class Out, class... Args>
    Out format_to(Out out, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class Out, class... Args>
    Out format_to(Out out, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class Out, class... Args>
    Out format_to(Out out, const locale& loc, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                  const Args&... args);
  template&lt;class Out, class... Args>
    Out format_to(Out out, const locale& loc, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                  const Args&... args);

  template&lt;class Out>
    Out vformat_to(Out out, string_view fmt,
                   <del>format_args_t&lt;type_identity_t&lt;Out>, char></del><ins>format_args</ins> args);
  template&lt;class Out>
    Out vformat_to(Out out, wstring_view fmt,
                   <del>format_args_t&lt;type_identity_t&lt;Out>, wchar_t></del><ins>wformat_args</ins> args);
  template&lt;class Out>
    Out vformat_to(Out out, const locale&amp; loc, string_view fmt,
                   <del>format_args_t&lt;type_identity_t&lt;Out>, char></del><ins>format_args</ins> args);
  template&lt;class Out>
    Out vformat_to(Out out, const locale&amp; loc, wstring_view fmt,
                   <del>format_args_t&lt;type_identity_t&lt;Out>, wchar_t></del><ins>wformat_args</ins> args);

  ...

  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                                        const Args&... args);
  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                                        const Args&... args);
  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        const locale& loc,
                                        <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                                        const Args&... args);
  template&lt;class Out, class... Args>
    format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                        const locale& loc,
                                        <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                                        const Args&... args);

  template&lt;class... Args>
    size_t formatted_size(<del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class... Args>
    size_t formatted_size(<del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class... Args>
    size_t formatted_size(const locale& loc, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                          const Args&... args);
  template&lt;class... Args>
    size_t formatted_size(const locale& loc, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                          const Args&... args);

  ...

  // 20.20.6.3, class template basic_format_args
  ...
<del>  template&lt;class Out, class charT>
    using format_args_t = basic_format_args&lt;basic_format_context&lt;Out, charT>>;</del>
</pre>

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf#page=732">[format.string.general]</a>:

A *format string* for arguments `args` is a (possibly empty) sequence of
replacement fields, escape sequences, and characters other than `{` and `}`. <ins>
A string `s` is a format string for argument types `Args` if there exist
`args` of types `Args` such that `s` is a format string for `args`.</ins>
Let `charT` be the character type of the format string. Each character that is
not part of a replacement field or an escape sequence is copied unchanged to the
output.

...

If all *arg-id*s in a format string are omitted (including those in the
*format-spec*, as interpreted by the corresponding `formatter` specialization),
argument indices 0, 1, 2, ... will automatically be used in that order. If some
*arg-id*s are omitted and some are present, the string is not a format string.
[Note: A format string cannot contain a mixture of automatic and manual
indexing. â€” end note] [*Example*:
<pre>
string s0 = format("{} to {}", "a", "b");   // OK, automatic indexing
string s1 = format("{1} to {0}", "a", "b"); // OK, manual indexing
string s2 = format("{0} to {}", "a", "b");  // not a format string (mixing automatic and manual indexing),
                                            // <del>throws format_error</del><ins>ill-formed</ins>
string s3 = format("{} to {1}", "a", "b");  // not a format string (mixing automatic and manual indexing),
                                            // <del>throws format_error</del><ins>ill-formed</ins>
</pre>
â€” *end example*]

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf#page=736">[format.err.report]</a>:

... Failure to allocate storage is reported by throwing an exception as described in
16.5.5.13.

<pre>
<ins>template&lt;class charT, class... Args> struct <i>basic-format-string</i> {  <i>// exposition only</i>
  basic_string_view&lt;charT> <i>str</i>;                                    <i>// exposition only</i>

  template&lt;class T> consteval basic-format-string(const T& s);
};</ins>
</pre>

<pre>
<ins>template&lt;class T> consteval basic-format-string(const T& s);</ins>
</pre>
<ins>
*Constraints:* `const T&` models `convertible_to<basic_string_view<charT>>`.
</ins>
<p>
<ins>
*Effects:* Direct-non-list-initializes `str` with `s`.
</ins>
<p>
<ins>
*Remarks:* A call to this function is not a core constant expression
([expr.const]) unless `str` is a format string for `Args`.
</ins>

Change in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf#page=736">[format.functions]</a>:

<pre>
template&lt;class... Args>
  string format(<del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt, const Args&... args);
</pre>

*Effects:* Equivalent to:

<pre>
return vformat(fmt<ins>.str</ins>, make_format_args(args...));
</pre>

<pre>
template&lt;class... Args>
  wstring format(<del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt, const Args&... args);
</pre>

*Effects:* Equivalent to:

<pre>
return vformat(fmt<ins>.str</ins>, make_wformat_args(args...));
</pre>

<pre>
template&lt;class... Args>
  string format(const locale& loc, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                const Args&... args);
</pre>

*Effects:* Equivalent to:

<pre>
return vformat(loc, fmt<ins>.str</ins>, make_format_args(args...));
</pre>

<pre>
template&lt;class... Args>
  wstring format(const locale& loc, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                 const Args&... args);
</pre>

*Effects:* Equivalent to:

<pre>
return vformat(loc, fmt<ins>.str</ins>, make_wformat_args(args...));
</pre>

...

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt, const Args&... args);
</pre>

<ins>
*Effects:* Equivalent to:
</ins>
<pre>
<ins>return vformat_to(out, fmt.str, make_format_args(args...));</ins>
</pre>

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt, const Args&... args);
</pre>

*Effects:* Equivalent to:

<pre>
<del>using context = basic_format_context&lt;Out, decltype(fmt)::value_type>;
return vformat_to(out, fmt.str, make_format_args&lt;context>(args...));</del>
<ins>return vformat_to(out, fmt, make_wformat_args(args...));</ins>
</pre>

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, const locale& loc, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                const Args&... args);
</pre>

<ins>
*Effects:* Equivalent to:
</ins>
<pre>
<ins>return vformat_to(out, loc, fmt.str, make_format_args(args...));</ins>
</pre>

<pre>
template&lt;class Out, class... Args>
  Out format_to(Out out, const locale& loc, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                const Args&... args);
</pre>

*Effects:* Equivalent to:

<pre>
<del>using context = basic_format_context&lt;Out, decltype(fmt)::value_type>;
return vformat_to(out, loc, fmt, make_format_args&lt;context>(args...));</del>
<ins>return vformat_to(out, loc, fmt, make_wformat_args(args...));</ins>
</pre>

<pre>
template&lt;class Out>
  Out vformat_to(Out out, string_view fmt,
                 <del>format_args_t&lt;type_identity_t&lt;Out>, char></del><ins>format_args</ins> args);
template&lt;class Out>
  Out vformat_to(Out out, wstring_view fmt,
                 <del>format_args_t&lt;type_identity_t&lt;Out>, wchar_t></del><ins>wformat_args</ins> args);
template&lt;class Out>
  Out vformat_to(Out out, const locale&amp; loc, string_view fmt,
                 <del>format_args_t&lt;type_identity_t&lt;Out>, char></del><ins>format_args</ins> args);
template&lt;class Out>
  Out vformat_to(Out out, const locale&amp; loc, wstring_view fmt,
                 <del>format_args_t&lt;type_identity_t&lt;Out>, wchar_t></del><ins>wformat_args</ins> args);
</pre>

...

<pre>
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                                      const Args&... args);
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                                      const Args&... args);
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      const locale& loc, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                                      const Args&... args);
template&lt;class Out, class... Args>
  format_to_n_result&lt;Out> format_to_n(Out out, iter_difference_t&lt;Out> n,
                                      const locale& loc, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                                      const Args&... args);
</pre>

Let

â€” `charT` be <code>decltype(fmt<ins>.str</ins>)::value_type</code>

...

<pre>
  template&lt;class... Args>
    size_t formatted_size(<del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class... Args>
    size_t formatted_size(<del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt, const Args&... args);
  template&lt;class... Args>
    size_t formatted_size(const locale& loc, <del>string_view</del><ins><i>format-string&lt;Args...></i></ins> fmt,
                          const Args&... args);
  template&lt;class... Args>
    size_t formatted_size(const locale& loc, <del>wstring_view</del><ins><i>wformat-string&lt;Args...></i></ins> fmt,
                          const Args&... args);
</pre>

Let `charT` be <code>decltype(fmt<ins>.str</ins>)::value_type</code>.

...

Add to Annex C (informative) Compatibility
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf#page=1641">[diff]</a>
the following new subclause:

<p>
<ins>
**C.? C++ and ISO C++ 2020** [diff.cpp20]
</ins>
<p>
<ins>
This subclause lists the differences between C++ and ISO C++ 2020 (ISO/IEC
14882:2017, Programming Languages â€” C++), by the chapters of this document.
</ins>

<p>
<ins>
**C.?.1 Clause 20: general utilites library** [diff.cpp20.utilities]
</ins>
<p>
<ins>
**Affected subclauses:** 20.20<br>
**Change:** Signature changes: `format`, `format_to`, `vformat_to`,
`format_to_n`, `formatted_size`. Removal of `format_args_t`.<br>
**Rationale:** Improve safety via compile-time format string checks, avoid
unnecessary template instantiations.<br>
**Effect on original feature:** Valid C++20 code that contained errors in format
strings or relied on previous format string signatures or `format_args_t` may
become ill-formed. For example:
</ins>
<pre>
<ins>
auto s = std::format("{:d}", "I am not a number"); // ill-formed,
                                                   // previously threw format_error 
</ins>
</pre>

Acknowledgements {#ack}
================

Thanks to Hana DusÃ­kovÃ¡ for demonstrating that the optimal formatting API can be
implemented with P1221.

<pre class=biblio>
{
  "CODESEARCH": {
	  "title": "Code search engine website",
	  "authors": ["Andrew Tomazos"],
	  "href": "https://codesearch.isocpp.org"
  },
  "FMT": {
    "title": "The {fmt} library",
    "authors": ["Victor Zverovich"],
    "etAl": true,
    "href": "https://github.com/fmtlib/fmt"
  },
  "P1045": {
    "title": "constexpr Function Parameters",
    "authors": ["David Stone"],
    "href": "http://wg21.link/p1045"
  },
  "P1221": {
    "title": "Parametric Expressions",
    "authors": ["Jason Rice"],
    "href": "http://wg21.link/p1221"
  },
  "RUST-FMT": {
    "title": "The Rust Standard Library, Module std::fmt",
    "href": "https://doc.rust-lang.org/std/fmt/"
  },
  "D-FORMAT": {
    "title": "D Library Reference, std.format",
    "href": "https://dlang.org/phobos/std_format.html"
  },
  "P0645": {
    "title": "Text Formatting",
    "authors": ["Victor Zverovich"],
    "href": "https://wg21.link/p0645"
  },
  "N4861": {
    "title": "Working Draft, Standard for Programming Language C++",
    "authors": ["Richard Smith", "Thomas Koeppe", "Jens Maurer", "Dawn Perchik"],
    "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf"
  }
}
</pre>
